% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PART.R
\name{run_gprofiler_PART_clusters}
\alias{run_gprofiler_PART_clusters}
\title{Gprofiler analysis}
\usage{
run_gprofiler_PART_clusters(
  object,
  transcript_version_adjust = NULL,
  gpro_sig = TRUE,
  vignette_run = FALSE
)
}
\arguments{
\item{object}{A time series object}

\item{transcript_version_adjust}{str indicating if transcript version IDs have been submitted.
The string should reflect the pre-script of the IDs, for example, ENSG or ENSMUST.
If this is the case, the decimal and following number must be removed for the gprofiler analysis
as gprofiler recognizes genes, not transcripts.}

\item{gpro_sig}{whether all or only statistically significant results should be returned.}

\item{vignette_run}{Boolean indicating if this function is being run within
vignettes, if so it will bypass a network connection error and load mock data
otherwise the error will terminate the script and send the error back to the user.}
}
\value{
The updated object with the Gprofiler results
}
\description{
Function which runs Gprofiler for PART clusters and stores the results
in the appropriate slot of the time object
}
\examples{
TS_object<-create_example_object_for_R()
TS_object <- normalize_timeSeries_with_deseq2(time_object=TS_object)
#Perform conditional differential gene expression analysis
TS_object<-conditional_DE_wrapper(TS_object,vignette_run=TRUE)
TS_object<-temporal_DE_wrapper(TS_object,do_all_combinations=TRUE,vignette_run=TRUE)
#Extract genes for PART clustering based on defined log(2)foldChange threshold
signi_genes<-select_genes_with_l2fc(TS_object)

#Use all samples, but implement a custom order. In this case it is reversed
sample_data<-exp_sample_data(TS_object)
TS_groups<-slot(TS_object,'group_names')
samps_2<-sample_data$sample[sample_data$group==TS_groups[2]]
samps_1<-sample_data$sample[sample_data$group==TS_groups[1]]

#Create the matrix that will be used for PART clustering
TS_object<-prep_counts_for_PART(object=TS_object,target_genes=signi_genes,scale=TRUE,target_samples=c(samps_2,samps_1))
TS_object<-compute_PART(TS_object,part_recursion=10,part_min_clust=10,dist_param="euclidean", hclust_param="average",vignette_run=TRUE)
TS_object<-run_gprofiler_PART_clusters(TS_object,vignette_run=TRUE)

}
